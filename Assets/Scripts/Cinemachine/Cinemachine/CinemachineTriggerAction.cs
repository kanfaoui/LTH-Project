using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.Playables;

namespace Cinemachine
{
	[DocumentationSorting(DocumentationSortingAttribute.Level.UserRef)]
	[SaveDuringPlay]
	[HelpURL("https://docs.unity3d.com/Packages/com.unity.cinemachine@2.8/api/Cinemachine.CinemachineTriggerAction.html")]
	public class CinemachineTriggerAction : MonoBehaviour
	{
		[Serializable]
		public struct ActionSettings
		{
			public enum Mode
			{
				Custom = 0,
				PriorityBoost = 1,
				Activate = 2,
				Deactivate = 3,
				Enable = 4,
				Disable = 5,
				Play = 6,
				Stop = 7
			}

			[Serializable]
			public class TriggerEvent : UnityEvent
			{
			}

			public enum TimeMode
			{
				FromStart = 0,
				FromEnd = 1,
				BeforeNow = 2,
				AfterNow = 3
			}

			[Tooltip("What action to take")]
			public Mode m_Action;

			[Tooltip("The target object on which to operate.  If null, then the current behaviour/GameObject will be used")]
			public UnityEngine.Object m_Target;

			[Tooltip("If PriorityBoost, this amount will be added to the virtual camera's priority")]
			public int m_BoostAmount;

			[Tooltip("If playing a timeline, start at this time")]
			public float m_StartTime;

			[Tooltip("How to interpret the start time")]
			public TimeMode m_Mode;

			[Tooltip("This event will be invoked")]
			public TriggerEvent m_Event;

			public ActionSettings(Mode action)
			{
				m_Action = action;
				m_Target = null;
				m_BoostAmount = 0;
				m_StartTime = 0f;
				m_Mode = TimeMode.FromStart;
				m_Event = new TriggerEvent();
			}

			public void Invoke()
			{
				UnityEngine.Object target = m_Target;
				if (target != null)
				{
					GameObject gameObject = target as GameObject;
					Behaviour behaviour = target as Behaviour;
					if (behaviour != null)
					{
						gameObject = behaviour.gameObject;
					}
					switch (m_Action)
					{
					case Mode.PriorityBoost:
					{
						CinemachineVirtualCameraBase component5 = gameObject.GetComponent<CinemachineVirtualCameraBase>();
						if (component5 != null)
						{
							component5.Priority += m_BoostAmount;
							component5.MoveToTopOfPrioritySubqueue();
						}
						break;
					}
					case Mode.Activate:
						if (gameObject != null)
						{
							gameObject.SetActive(true);
							CinemachineVirtualCameraBase component6 = gameObject.GetComponent<CinemachineVirtualCameraBase>();
							if (component6 != null)
							{
								component6.MoveToTopOfPrioritySubqueue();
							}
						}
						break;
					case Mode.Deactivate:
						if (gameObject != null)
						{
							gameObject.SetActive(false);
						}
						break;
					case Mode.Enable:
						if (behaviour != null)
						{
							behaviour.enabled = true;
						}
						break;
					case Mode.Disable:
						if (behaviour != null)
						{
							behaviour.enabled = false;
						}
						break;
					case Mode.Play:
					{
						PlayableDirector component3 = gameObject.GetComponent<PlayableDirector>();
						if (component3 != null)
						{
							double num = 0.0;
							double duration = component3.duration;
							double time = component3.time;
							switch (m_Mode)
							{
							default:
								num += (double)m_StartTime;
								break;
							case TimeMode.FromEnd:
								num = duration - (double)m_StartTime;
								break;
							case TimeMode.BeforeNow:
								num = time - (double)m_StartTime;
								break;
							case TimeMode.AfterNow:
								num = time + (double)m_StartTime;
								break;
							}
							component3.time = num;
							component3.Play();
						}
						else
						{
							Animation component4 = gameObject.GetComponent<Animation>();
							if (component4 != null)
							{
								component4.Play();
							}
						}
						break;
					}
					case Mode.Stop:
					{
						PlayableDirector component = gameObject.GetComponent<PlayableDirector>();
						if (component != null)
						{
							component.Stop();
							break;
						}
						Animation component2 = gameObject.GetComponent<Animation>();
						if (component2 != null)
						{
							component2.Stop();
						}
						break;
					}
					}
				}
				m_Event.Invoke();
			}
		}

		[Header("Trigger Object Filter")]
		[Tooltip("Only triggers generated by objects on these layers will be considered")]
		public LayerMask m_LayerMask = 1;

		[TagField]
		[Tooltip("If set, only triggers generated by objects with this tag will be considered")]
		public string m_WithTag = string.Empty;

		[TagField]
		[Tooltip("Triggers generated by objects with this tag will be ignored")]
		public string m_WithoutTag = string.Empty;

		[NoSaveDuringPlay]
		[Tooltip("Skip this many trigger entries before taking action")]
		public int m_SkipFirst;

		[Tooltip("Repeat the action for all subsequent trigger entries")]
		public bool m_Repeating = true;

		public ActionSettings m_OnObjectEnter = new ActionSettings(ActionSettings.Mode.Custom);

		public ActionSettings m_OnObjectExit = new ActionSettings(ActionSettings.Mode.Custom);

		private HashSet<GameObject> m_ActiveTriggerObjects = new HashSet<GameObject>();

		private bool Filter(GameObject other)
		{
			if (!base.enabled)
			{
				return false;
			}
			if (((1 << other.layer) & (int)m_LayerMask) == 0)
			{
				return false;
			}
			if (m_WithTag.Length != 0 && !other.CompareTag(m_WithTag))
			{
				return false;
			}
			if (m_WithoutTag.Length != 0 && other.CompareTag(m_WithoutTag))
			{
				return false;
			}
			return true;
		}

		private void InternalDoTriggerEnter(GameObject other)
		{
			if (Filter(other))
			{
				m_SkipFirst--;
				if (m_SkipFirst <= -1 && (m_Repeating || m_SkipFirst == -1))
				{
					m_ActiveTriggerObjects.Add(other);
					m_OnObjectEnter.Invoke();
				}
			}
		}

		private void InternalDoTriggerExit(GameObject other)
		{
			if (m_ActiveTriggerObjects.Contains(other))
			{
				m_ActiveTriggerObjects.Remove(other);
				if (base.enabled)
				{
					m_OnObjectExit.Invoke();
				}
			}
		}

		private void OnTriggerEnter(Collider other)
		{
			InternalDoTriggerEnter(other.gameObject);
		}

		private void OnTriggerExit(Collider other)
		{
			InternalDoTriggerExit(other.gameObject);
		}

		private void OnCollisionEnter(Collision other)
		{
			InternalDoTriggerEnter(other.gameObject);
		}

		private void OnCollisionExit(Collision other)
		{
			InternalDoTriggerExit(other.gameObject);
		}

		private void OnTriggerEnter2D(Collider2D other)
		{
			InternalDoTriggerEnter(other.gameObject);
		}

		private void OnTriggerExit2D(Collider2D other)
		{
			InternalDoTriggerExit(other.gameObject);
		}

		private void OnCollisionEnter2D(Collision2D other)
		{
			InternalDoTriggerEnter(other.gameObject);
		}

		private void OnCollisionExit2D(Collision2D other)
		{
			InternalDoTriggerExit(other.gameObject);
		}

		private void OnEnable()
		{
		}
	}
}
